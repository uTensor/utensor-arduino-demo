/* Auto-generated by utensor cli */
#include "uTensor.h"
#include "models/my_model/my_model.hpp"
#include "constants/my_model/params_my_model.hpp"


My_model::My_model () :
op_FullyConnectedOperator_000(TFLM::TfLiteFusedActivation::kTfLiteActRelu)
, op_DepthwiseSeparableConvOperator_001({ 1, 1 }, VALID, 8, { 1, 1 }, TFLM::TfLiteFusedActivation::kTfLiteActRelu)
, op_QuantizeOperator_002()
, op_FullyConnectedOperator_003(TFLM::TfLiteFusedActivation::kTfLiteActNone)
, op_ReshapeOperator_004({ 1, 288 })
, op_MaxPoolOperator_005({ 2, 2 }, { 1, 2, 2, 1 }, VALID)
, op_DequantizeOperator_006()
{
  Context::get_default_context()->set_ram_data_allocator(&ram_allocator);
  Context::get_default_context()->set_metadata_allocator(&metadata_allocator);
  // TODO: moving ROMTensor declarations here
}

void My_model::compute()
{
  // update context in case there are multiple models being run
  Context::get_default_context()->set_ram_data_allocator(&ram_allocator);
  Context::get_default_context()->set_metadata_allocator(&metadata_allocator);
  // start rendering local snippets
  Tensor t_input_1_int80 = new RamTensor({ 1, 28, 28, 1 }, i8);
    int32_t t_input_1_int80_zp = -128;
    float t_input_1_int80_scale = 0.003921569;
    PerTensorQuantizationParams t_input_1_int80_quant_params(t_input_1_int80_zp, t_input_1_int80_scale);
    t_input_1_int80->set_quantization_params(t_input_1_int80_quant_params);


  op_QuantizeOperator_002
    .set_inputs({
        { TflmSymQuantOps::QuantizeOperator<int8_t, float>::input, inputs[input_0].tensor() },
    })
    .set_outputs({
        { TflmSymQuantOps::QuantizeOperator<int8_t, float>::output, t_input_1_int80}
    })
    .eval();

  Tensor t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0 = new RamTensor({ 1, 14, 14, 1 }, i8);
    int32_t t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0_zp = -128;
    float t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0_scale = 0.003921569;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0_quant_params(t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0_zp, t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0_scale);
    t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0->set_quantization_params(t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0_quant_params);


  op_MaxPoolOperator_005
    .set_inputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::in, t_input_1_int80 },
    })
    .set_outputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::out, t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0}
    })
    .eval();

  t_input_1_int80.free();

  Tensor t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0 = new RomTensor({ 1, 3, 3, 8 }, i8, data_StatefulPartitionedCall_my_model_conv2d_Conv2D_ReadVariableOp_0);
    int32_t arr_t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0_zp[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    float arr_t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0_scale[8] = { 0.0050831237, 0.005001122, 0.00810849, 0.009929325, 0.0103350375, 0.007988794, 0.00911208, 0.0147075765 };
    PerChannelQuantizationParams t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0_quant_params(arr_t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0_zp, arr_t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0_scale);
    t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0->set_quantization_params(t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0_quant_params);


  Tensor t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0 = new RomTensor({ 8 }, i32, data_StatefulPartitionedCall_my_model_conv2d_Conv2D_bias_0);
    int32_t arr_t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0_zp[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    float arr_t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0_scale[8] = { 1.993382e-05, 1.9612246e-05, 3.1798e-05, 3.8938535e-05, 4.052956e-05, 3.1328604e-05, 3.5733647e-05, 5.7676774e-05 };
    PerChannelQuantizationParams t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0_quant_params(arr_t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0_zp, arr_t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0_scale);
    t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0->set_quantization_params(t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0_quant_params);


  Tensor t_StatefulPartitionedCallmy_modelconv2dRelu0 = new RamTensor({ 1, 12, 12, 8 }, i8);
    int32_t t_StatefulPartitionedCallmy_modelconv2dRelu0_zp = -128;
    float t_StatefulPartitionedCallmy_modelconv2dRelu0_scale = 0.011555707;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modelconv2dRelu0_quant_params(t_StatefulPartitionedCallmy_modelconv2dRelu0_zp, t_StatefulPartitionedCallmy_modelconv2dRelu0_scale);
    t_StatefulPartitionedCallmy_modelconv2dRelu0->set_quantization_params(t_StatefulPartitionedCallmy_modelconv2dRelu0_quant_params);


  op_DepthwiseSeparableConvOperator_001
    .set_inputs({
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::in, t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0 },
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::filter, t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0 },
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::bias, t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0 },
    })
    .set_outputs({
        { TflmSymQuantOps::DepthwiseSeparableConvOperator<int8_t>::out, t_StatefulPartitionedCallmy_modelconv2dRelu0}
    })
    .eval();

  t_StatefulPartitionedCallmy_modelconv2dConv2D_bias0.free();

  t_StatefulPartitionedCallmy_modelmax_pooling2dMaxPool0.free();

  t_StatefulPartitionedCallmy_modelconv2dConv2DReadVariableOp0.free();

  Tensor t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0 = new RamTensor({ 1, 6, 6, 8 }, i8);
    int32_t t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0_zp = -128;
    float t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0_scale = 0.011555707;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0_quant_params(t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0_zp, t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0_scale);
    t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0->set_quantization_params(t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0_quant_params);


  op_MaxPoolOperator_005
    .set_inputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::in, t_StatefulPartitionedCallmy_modelconv2dRelu0 },
    })
    .set_outputs({
        { ReferenceOperators::MaxPoolOperator<int8_t>::out, t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0}
    })
    .eval();

  t_StatefulPartitionedCallmy_modelconv2dRelu0.free();

  Tensor t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00 = new RamTensor({ 1, 288 }, i8);
    int32_t t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00_zp = -128;
    float t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00_scale = 0.011555707;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00_quant_params(t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00_zp, t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00_scale);
    t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00->set_quantization_params(t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00_quant_params);


  op_ReshapeOperator_004
    .set_inputs({
        { ReferenceOperators::ReshapeOperator<int8_t>::input, t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0 },
    })
    .set_outputs({
        { ReferenceOperators::ReshapeOperator<int8_t>::output, t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00}
    })
    .eval();

  t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool0.free();

  Tensor t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0 = new RomTensor({ 288, 16 }, i8, data_StatefulPartitionedCall_my_model_dense_MatMul_ReadVariableOp_transpose_0);
    int32_t t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0_zp = 0;
    float t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0_scale = 0.011830574;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0_quant_params(t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0_zp, t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0_scale);
    t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0->set_quantization_params(t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0_quant_params);


  Tensor t_StatefulPartitionedCallmy_modeldenseMatMul_bias0 = new RomTensor({ 16 }, i32, data_StatefulPartitionedCall_my_model_dense_MatMul_bias_0);
    int32_t t_StatefulPartitionedCallmy_modeldenseMatMul_bias0_zp = 0;
    float t_StatefulPartitionedCallmy_modeldenseMatMul_bias0_scale = 0.00013671065;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modeldenseMatMul_bias0_quant_params(t_StatefulPartitionedCallmy_modeldenseMatMul_bias0_zp, t_StatefulPartitionedCallmy_modeldenseMatMul_bias0_scale);
    t_StatefulPartitionedCallmy_modeldenseMatMul_bias0->set_quantization_params(t_StatefulPartitionedCallmy_modeldenseMatMul_bias0_quant_params);


  Tensor t_StatefulPartitionedCallmy_modeldenseRelu0 = new RamTensor({ 1, 16 }, i8);
    int32_t t_StatefulPartitionedCallmy_modeldenseRelu0_zp = -128;
    float t_StatefulPartitionedCallmy_modeldenseRelu0_scale = 0.08426106;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modeldenseRelu0_quant_params(t_StatefulPartitionedCallmy_modeldenseRelu0_zp, t_StatefulPartitionedCallmy_modeldenseRelu0_scale);
    t_StatefulPartitionedCallmy_modeldenseRelu0->set_quantization_params(t_StatefulPartitionedCallmy_modeldenseRelu0_quant_params);


  op_FullyConnectedOperator_000
    .set_inputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::input, t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::filter, t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::bias, t_StatefulPartitionedCallmy_modeldenseMatMul_bias0 },
    })
    .set_outputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::output, t_StatefulPartitionedCallmy_modeldenseRelu0}
    })
    .eval();

  t_StatefulPartitionedCallmy_modeldenseMatMulReadVariableOptranspose0.free();

  t_StatefulPartitionedCallmy_modelmax_pooling2d_1MaxPool_0_Reshape00.free();

  t_StatefulPartitionedCallmy_modeldenseMatMul_bias0.free();

  Tensor t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0 = new RomTensor({ 16, 10 }, i8, data_StatefulPartitionedCall_my_model_dense_1_MatMul_ReadVariableOp_transpose_0);
    int32_t t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0_zp = 0;
    float t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0_scale = 0.009137652;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0_quant_params(t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0_zp, t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0_scale);
    t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0->set_quantization_params(t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0_quant_params);


  Tensor t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0 = new RomTensor({ 10 }, i32, data_StatefulPartitionedCall_my_model_dense_1_MatMul_bias_0);
    int32_t t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0_zp = 0;
    float t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0_scale = 0.00076994824;
    PerTensorQuantizationParams t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0_quant_params(t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0_zp, t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0_scale);
    t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0->set_quantization_params(t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0_quant_params);


  Tensor t_Identity_int80 = new RamTensor({ 1, 10 }, i8);
    int32_t t_Identity_int80_zp = 22;
    float t_Identity_int80_scale = 0.1801216;
    PerTensorQuantizationParams t_Identity_int80_quant_params(t_Identity_int80_zp, t_Identity_int80_scale);
    t_Identity_int80->set_quantization_params(t_Identity_int80_quant_params);


  op_FullyConnectedOperator_003
    .set_inputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::input, t_StatefulPartitionedCallmy_modeldenseRelu0 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::filter, t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0 },
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::bias, t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0 },
    })
    .set_outputs({
        { TflmSymQuantOps::FullyConnectedOperator<int8_t>::output, t_Identity_int80}
    })
    .eval();

  t_StatefulPartitionedCallmy_modeldense_1MatMul_bias0.free();

  t_StatefulPartitionedCallmy_modeldenseRelu0.free();

  t_StatefulPartitionedCallmy_modeldense_1MatMulReadVariableOptranspose0.free();

  op_DequantizeOperator_006
    .set_inputs({
        { TflmSymQuantOps::DequantizeOperator<float, int8_t>::a, t_Identity_int80 },
    })
    .set_outputs({
        { TflmSymQuantOps::DequantizeOperator<float, int8_t>::b, outputs[output_0].tensor()}
    })
    .eval();

  t_Identity_int80.free();
  // end of rendering local snippets
}